// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login renders on the page with no errors 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    allCookies={Object {}}
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
        "hooks": undefined,
      }
    }
    location={
      Object {
        "pathname": "/login",
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    updateUser={[Function]}
    updateValidAuth={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        null,
        <Grid
          centered={true}
          columns={16}
        >
          <GridRow>
            <p>
              You can sign up / sign in with one of your existing third-party accounts.
            </p>
          </GridRow>
          <GridRow>
            <GridColumn
              width={8}
            >
              <Button
                as="button"
                color="red"
                floated="right"
                id="google"
                onClick={[Function]}
              >
                <Icon
                  as="i"
                  name="google"
                />
                Sign in with Google
              </Button>
            </GridColumn>
            <GridColumn
              width={8}
            >
              <Button
                as="button"
                color="black"
                floated="left"
                id="github"
                onClick={[Function]}
              >
                <Icon
                  as="i"
                  name="github"
                />
                Sign in with GitHub
              </Button>
            </GridColumn>
          </GridRow>
          <GridRow>
            <p>
              Don't have any of those accounts?
               
              <a
                href="/accounts/signup"
              >
                Create a rovercode account.
              </a>
            </p>
          </GridRow>
          <GridRow>
            <p>
              Already have a rovercode account? Sign in here:
            </p>
          </GridRow>
          <GridRow>
            <GridColumn
              width={4}
            >
              <Segment
                raised={true}
                secondary={true}
              >
                <Form
                  as="form"
                  floated="left"
                  onSubmit={[Function]}
                >
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    icon="user"
                    iconPosition="left"
                    onChange={[Function]}
                    placeholder="Username"
                    required={true}
                  />
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    icon="lock"
                    iconPosition="left"
                    onChange={[Function]}
                    placeholder="Password"
                    required={true}
                    type="password"
                  />
                  <FormButton
                    as={[Function]}
                    control={[Function]}
                    primary={true}
                    type="submit"
                  >
                    Sign In
                  </FormButton>
                </Form>
              </Segment>
            </GridColumn>
          </GridRow>
          <GridRow>
            <p>
              <a
                href="/accounts/reset"
              >
                Forgot Password?
              </a>
            </p>
          </GridRow>
        </Grid>,
      ],
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "centered": true,
          "children": Array [
            <GridRow>
              <p>
                You can sign up / sign in with one of your existing third-party accounts.
              </p>
            </GridRow>,
            null,
            <GridRow>
              <GridColumn
                width={8}
              >
                <Button
                  as="button"
                  color="red"
                  floated="right"
                  id="google"
                  onClick={[Function]}
                >
                  <Icon
                    as="i"
                    name="google"
                  />
                  Sign in with Google
                </Button>
              </GridColumn>
              <GridColumn
                width={8}
              >
                <Button
                  as="button"
                  color="black"
                  floated="left"
                  id="github"
                  onClick={[Function]}
                >
                  <Icon
                    as="i"
                    name="github"
                  />
                  Sign in with GitHub
                </Button>
              </GridColumn>
            </GridRow>,
            <GridRow>
              <p>
                Don't have any of those accounts?
                 
                <a
                  href="/accounts/signup"
                >
                  Create a rovercode account.
                </a>
              </p>
            </GridRow>,
            <GridRow>
              <p>
                Already have a rovercode account? Sign in here:
              </p>
            </GridRow>,
            null,
            <GridRow>
              <GridColumn
                width={4}
              >
                <Segment
                  raised={true}
                  secondary={true}
                >
                  <Form
                    as="form"
                    floated="left"
                    onSubmit={[Function]}
                  >
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="user"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                    />
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="lock"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                    />
                    <FormButton
                      as={[Function]}
                      control={[Function]}
                      primary={true}
                      type="submit"
                    >
                      Sign In
                    </FormButton>
                  </Form>
                </Segment>
              </GridColumn>
            </GridRow>,
            <GridRow>
              <p>
                <a
                  href="/accounts/reset"
                >
                  Forgot Password?
                </a>
              </p>
            </GridRow>,
          ],
          "columns": 16,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <p>
                You can sign up / sign in with one of your existing third-party accounts.
              </p>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "You can sign up / sign in with one of your existing third-party accounts.",
              },
              "ref": null,
              "rendered": "You can sign up / sign in with one of your existing third-party accounts.",
              "type": "p",
            },
            "type": [Function],
          },
          null,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <GridColumn
                  width={8}
                >
                  <Button
                    as="button"
                    color="red"
                    floated="right"
                    id="google"
                    onClick={[Function]}
                  >
                    <Icon
                      as="i"
                      name="google"
                    />
                    Sign in with Google
                  </Button>
                </GridColumn>,
                <GridColumn
                  width={8}
                >
                  <Button
                    as="button"
                    color="black"
                    floated="left"
                    id="github"
                    onClick={[Function]}
                  >
                    <Icon
                      as="i"
                      name="github"
                    />
                    Sign in with GitHub
                  </Button>
                </GridColumn>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Button
                    as="button"
                    color="red"
                    floated="right"
                    id="google"
                    onClick={[Function]}
                  >
                    <Icon
                      as="i"
                      name="google"
                    />
                    Sign in with Google
                  </Button>,
                  "width": 8,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "button",
                    "children": Array [
                      <Icon
                        as="i"
                        name="google"
                      />,
                      "Sign in with Google",
                    ],
                    "color": "red",
                    "floated": "right",
                    "id": "google",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "as": "i",
                        "name": "google",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "Sign in with Google",
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Button
                    as="button"
                    color="black"
                    floated="left"
                    id="github"
                    onClick={[Function]}
                  >
                    <Icon
                      as="i"
                      name="github"
                    />
                    Sign in with GitHub
                  </Button>,
                  "width": 8,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "button",
                    "children": Array [
                      <Icon
                        as="i"
                        name="github"
                      />,
                      "Sign in with GitHub",
                    ],
                    "color": "black",
                    "floated": "left",
                    "id": "github",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "as": "i",
                        "name": "github",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "Sign in with GitHub",
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <p>
                Don't have any of those accounts?
                 
                <a
                  href="/accounts/signup"
                >
                  Create a rovercode account.
                </a>
              </p>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Don't have any of those accounts?",
                  " ",
                  <a
                    href="/accounts/signup"
                  >
                    Create a rovercode account.
                  </a>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "Don't have any of those accounts?",
                " ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Create a rovercode account.",
                    "href": "/accounts/signup",
                  },
                  "ref": null,
                  "rendered": "Create a rovercode account.",
                  "type": "a",
                },
              ],
              "type": "p",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <p>
                Already have a rovercode account? Sign in here:
              </p>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Already have a rovercode account? Sign in here:",
              },
              "ref": null,
              "rendered": "Already have a rovercode account? Sign in here:",
              "type": "p",
            },
            "type": [Function],
          },
          null,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <GridColumn
                width={4}
              >
                <Segment
                  raised={true}
                  secondary={true}
                >
                  <Form
                    as="form"
                    floated="left"
                    onSubmit={[Function]}
                  >
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="user"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                    />
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="lock"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                    />
                    <FormButton
                      as={[Function]}
                      control={[Function]}
                      primary={true}
                      type="submit"
                    >
                      Sign In
                    </FormButton>
                  </Form>
                </Segment>
              </GridColumn>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Segment
                  raised={true}
                  secondary={true}
                >
                  <Form
                    as="form"
                    floated="left"
                    onSubmit={[Function]}
                  >
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="user"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                    />
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="lock"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                    />
                    <FormButton
                      as={[Function]}
                      control={[Function]}
                      primary={true}
                      type="submit"
                    >
                      Sign In
                    </FormButton>
                  </Form>
                </Segment>,
                "width": 4,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Form
                    as="form"
                    floated="left"
                    onSubmit={[Function]}
                  >
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="user"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                    />
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="lock"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                    />
                    <FormButton
                      as={[Function]}
                      control={[Function]}
                      primary={true}
                      type="submit"
                    >
                      Sign In
                    </FormButton>
                  </Form>,
                  "raised": true,
                  "secondary": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "form",
                    "children": Array [
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="user"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                      />,
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="lock"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                      />,
                      <FormButton
                        as={[Function]}
                        control={[Function]}
                        primary={true}
                        type="submit"
                      >
                        Sign In
                      </FormButton>,
                    ],
                    "floated": "left",
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "as": [Function],
                        "control": [Function],
                        "icon": "user",
                        "iconPosition": "left",
                        "onChange": [Function],
                        "placeholder": "Username",
                        "required": true,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "as": [Function],
                        "control": [Function],
                        "icon": "lock",
                        "iconPosition": "left",
                        "onChange": [Function],
                        "placeholder": "Password",
                        "required": true,
                        "type": "password",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "as": [Function],
                        "children": "Sign In",
                        "control": [Function],
                        "primary": true,
                        "type": "submit",
                      },
                      "ref": null,
                      "rendered": "Sign In",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <p>
                <a
                  href="/accounts/reset"
                >
                  Forgot Password?
                </a>
              </p>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <a
                  href="/accounts/reset"
                >
                  Forgot Password?
                </a>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Forgot Password?",
                  "href": "/accounts/reset",
                },
                "ref": null,
                "rendered": "Forgot Password?",
                "type": "a",
              },
              "type": "p",
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          null,
          <Grid
            centered={true}
            columns={16}
          >
            <GridRow>
              <p>
                You can sign up / sign in with one of your existing third-party accounts.
              </p>
            </GridRow>
            <GridRow>
              <GridColumn
                width={8}
              >
                <Button
                  as="button"
                  color="red"
                  floated="right"
                  id="google"
                  onClick={[Function]}
                >
                  <Icon
                    as="i"
                    name="google"
                  />
                  Sign in with Google
                </Button>
              </GridColumn>
              <GridColumn
                width={8}
              >
                <Button
                  as="button"
                  color="black"
                  floated="left"
                  id="github"
                  onClick={[Function]}
                >
                  <Icon
                    as="i"
                    name="github"
                  />
                  Sign in with GitHub
                </Button>
              </GridColumn>
            </GridRow>
            <GridRow>
              <p>
                Don't have any of those accounts?
                 
                <a
                  href="/accounts/signup"
                >
                  Create a rovercode account.
                </a>
              </p>
            </GridRow>
            <GridRow>
              <p>
                Already have a rovercode account? Sign in here:
              </p>
            </GridRow>
            <GridRow>
              <GridColumn
                width={4}
              >
                <Segment
                  raised={true}
                  secondary={true}
                >
                  <Form
                    as="form"
                    floated="left"
                    onSubmit={[Function]}
                  >
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="user"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                    />
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="lock"
                      iconPosition="left"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                    />
                    <FormButton
                      as={[Function]}
                      control={[Function]}
                      primary={true}
                      type="submit"
                    >
                      Sign In
                    </FormButton>
                  </Form>
                </Segment>
              </GridColumn>
            </GridRow>
            <GridRow>
              <p>
                <a
                  href="/accounts/reset"
                >
                  Forgot Password?
                </a>
              </p>
            </GridRow>
          </Grid>,
        ],
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "centered": true,
            "children": Array [
              <GridRow>
                <p>
                  You can sign up / sign in with one of your existing third-party accounts.
                </p>
              </GridRow>,
              null,
              <GridRow>
                <GridColumn
                  width={8}
                >
                  <Button
                    as="button"
                    color="red"
                    floated="right"
                    id="google"
                    onClick={[Function]}
                  >
                    <Icon
                      as="i"
                      name="google"
                    />
                    Sign in with Google
                  </Button>
                </GridColumn>
                <GridColumn
                  width={8}
                >
                  <Button
                    as="button"
                    color="black"
                    floated="left"
                    id="github"
                    onClick={[Function]}
                  >
                    <Icon
                      as="i"
                      name="github"
                    />
                    Sign in with GitHub
                  </Button>
                </GridColumn>
              </GridRow>,
              <GridRow>
                <p>
                  Don't have any of those accounts?
                   
                  <a
                    href="/accounts/signup"
                  >
                    Create a rovercode account.
                  </a>
                </p>
              </GridRow>,
              <GridRow>
                <p>
                  Already have a rovercode account? Sign in here:
                </p>
              </GridRow>,
              null,
              <GridRow>
                <GridColumn
                  width={4}
                >
                  <Segment
                    raised={true}
                    secondary={true}
                  >
                    <Form
                      as="form"
                      floated="left"
                      onSubmit={[Function]}
                    >
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="user"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                      />
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="lock"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                      />
                      <FormButton
                        as={[Function]}
                        control={[Function]}
                        primary={true}
                        type="submit"
                      >
                        Sign In
                      </FormButton>
                    </Form>
                  </Segment>
                </GridColumn>
              </GridRow>,
              <GridRow>
                <p>
                  <a
                    href="/accounts/reset"
                  >
                    Forgot Password?
                  </a>
                </p>
              </GridRow>,
            ],
            "columns": 16,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <p>
                  You can sign up / sign in with one of your existing third-party accounts.
                </p>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "You can sign up / sign in with one of your existing third-party accounts.",
                },
                "ref": null,
                "rendered": "You can sign up / sign in with one of your existing third-party accounts.",
                "type": "p",
              },
              "type": [Function],
            },
            null,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <GridColumn
                    width={8}
                  >
                    <Button
                      as="button"
                      color="red"
                      floated="right"
                      id="google"
                      onClick={[Function]}
                    >
                      <Icon
                        as="i"
                        name="google"
                      />
                      Sign in with Google
                    </Button>
                  </GridColumn>,
                  <GridColumn
                    width={8}
                  >
                    <Button
                      as="button"
                      color="black"
                      floated="left"
                      id="github"
                      onClick={[Function]}
                    >
                      <Icon
                        as="i"
                        name="github"
                      />
                      Sign in with GitHub
                    </Button>
                  </GridColumn>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <Button
                      as="button"
                      color="red"
                      floated="right"
                      id="google"
                      onClick={[Function]}
                    >
                      <Icon
                        as="i"
                        name="google"
                      />
                      Sign in with Google
                    </Button>,
                    "width": 8,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": "button",
                      "children": Array [
                        <Icon
                          as="i"
                          name="google"
                        />,
                        "Sign in with Google",
                      ],
                      "color": "red",
                      "floated": "right",
                      "id": "google",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "as": "i",
                          "name": "google",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "Sign in with Google",
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <Button
                      as="button"
                      color="black"
                      floated="left"
                      id="github"
                      onClick={[Function]}
                    >
                      <Icon
                        as="i"
                        name="github"
                      />
                      Sign in with GitHub
                    </Button>,
                    "width": 8,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": "button",
                      "children": Array [
                        <Icon
                          as="i"
                          name="github"
                        />,
                        "Sign in with GitHub",
                      ],
                      "color": "black",
                      "floated": "left",
                      "id": "github",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "as": "i",
                          "name": "github",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "Sign in with GitHub",
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <p>
                  Don't have any of those accounts?
                   
                  <a
                    href="/accounts/signup"
                  >
                    Create a rovercode account.
                  </a>
                </p>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Don't have any of those accounts?",
                    " ",
                    <a
                      href="/accounts/signup"
                    >
                      Create a rovercode account.
                    </a>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Don't have any of those accounts?",
                  " ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Create a rovercode account.",
                      "href": "/accounts/signup",
                    },
                    "ref": null,
                    "rendered": "Create a rovercode account.",
                    "type": "a",
                  },
                ],
                "type": "p",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <p>
                  Already have a rovercode account? Sign in here:
                </p>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Already have a rovercode account? Sign in here:",
                },
                "ref": null,
                "rendered": "Already have a rovercode account? Sign in here:",
                "type": "p",
              },
              "type": [Function],
            },
            null,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <GridColumn
                  width={4}
                >
                  <Segment
                    raised={true}
                    secondary={true}
                  >
                    <Form
                      as="form"
                      floated="left"
                      onSubmit={[Function]}
                    >
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="user"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                      />
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="lock"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                      />
                      <FormButton
                        as={[Function]}
                        control={[Function]}
                        primary={true}
                        type="submit"
                      >
                        Sign In
                      </FormButton>
                    </Form>
                  </Segment>
                </GridColumn>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Segment
                    raised={true}
                    secondary={true}
                  >
                    <Form
                      as="form"
                      floated="left"
                      onSubmit={[Function]}
                    >
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="user"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                      />
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="lock"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                      />
                      <FormButton
                        as={[Function]}
                        control={[Function]}
                        primary={true}
                        type="submit"
                      >
                        Sign In
                      </FormButton>
                    </Form>
                  </Segment>,
                  "width": 4,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <Form
                      as="form"
                      floated="left"
                      onSubmit={[Function]}
                    >
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="user"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                      />
                      <FormInput
                        as={[Function]}
                        control={[Function]}
                        icon="lock"
                        iconPosition="left"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                      />
                      <FormButton
                        as={[Function]}
                        control={[Function]}
                        primary={true}
                        type="submit"
                      >
                        Sign In
                      </FormButton>
                    </Form>,
                    "raised": true,
                    "secondary": true,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": "form",
                      "children": Array [
                        <FormInput
                          as={[Function]}
                          control={[Function]}
                          icon="user"
                          iconPosition="left"
                          onChange={[Function]}
                          placeholder="Username"
                          required={true}
                        />,
                        <FormInput
                          as={[Function]}
                          control={[Function]}
                          icon="lock"
                          iconPosition="left"
                          onChange={[Function]}
                          placeholder="Password"
                          required={true}
                          type="password"
                        />,
                        <FormButton
                          as={[Function]}
                          control={[Function]}
                          primary={true}
                          type="submit"
                        >
                          Sign In
                        </FormButton>,
                      ],
                      "floated": "left",
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": [Function],
                          "control": [Function],
                          "icon": "user",
                          "iconPosition": "left",
                          "onChange": [Function],
                          "placeholder": "Username",
                          "required": true,
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": [Function],
                          "control": [Function],
                          "icon": "lock",
                          "iconPosition": "left",
                          "onChange": [Function],
                          "placeholder": "Password",
                          "required": true,
                          "type": "password",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": [Function],
                          "children": "Sign In",
                          "control": [Function],
                          "primary": true,
                          "type": "submit",
                        },
                        "ref": null,
                        "rendered": "Sign In",
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <p>
                  <a
                    href="/accounts/reset"
                  >
                    Forgot Password?
                  </a>
                </p>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <a
                    href="/accounts/reset"
                  >
                    Forgot Password?
                  </a>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Forgot Password?",
                    "href": "/accounts/reset",
                  },
                  "ref": null,
                  "rendered": "Forgot Password?",
                  "type": "a",
                },
                "type": "p",
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "context": Object {
      "cookies": Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
        "hooks": undefined,
      },
    },
  },
}
`;
