// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Credential component renders on the page with no errors 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Credential
    rover={
      Object {
        "client_id": "1234",
        "client_secret": "5678",
        "config": Object {
          "left_eye_port": 1,
          "right_eye_port": 2,
        },
        "id": 1,
        "name": "Sparky",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "centered": true,
      "children": Array [
        <ModalHeader>
          Enter WiFi Credentials
        </ModalHeader>,
        <ModalContent>
          <p>
            The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.
          </p>
          <Form
            as="form"
            id="apForm"
            onSubmit={[Function]}
          >
            <FormInput
              as={[Function]}
              control={[Function]}
              onChange={[Function]}
              placeholder="Access point name"
              required={true}
            />
            <FormInput
              as={[Function]}
              control={[Function]}
              onChange={[Function]}
              placeholder="Access point password"
              required={true}
              type="password"
            />
          </Form>
        </ModalContent>,
        <ModalActions>
          <Button
            as="button"
            form="apForm"
            primary={true}
            type="submit"
          >
            Download
          </Button>
          <Button
            as="button"
            onClick={[Function]}
          >
            Cancel
          </Button>
        </ModalActions>,
      ],
      "closeOnDimmerClick": true,
      "closeOnDocumentClick": false,
      "dimmer": true,
      "eventPool": "Modal",
      "onClose": [Function],
      "open": false,
      "trigger": <Button
        as="button"
        onClick={[Function]}
      >
        <Icon
          as="i"
          name="download"
        />
        Download Credentials
      </Button>,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Enter WiFi Credentials",
        },
        "ref": null,
        "rendered": "Enter WiFi Credentials",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <p>
              The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.
            </p>,
            <Form
              as="form"
              id="apForm"
              onSubmit={[Function]}
            >
              <FormInput
                as={[Function]}
                control={[Function]}
                onChange={[Function]}
                placeholder="Access point name"
                required={true}
              />
              <FormInput
                as={[Function]}
                control={[Function]}
                onChange={[Function]}
                placeholder="Access point password"
                required={true}
                type="password"
              />
            </Form>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.",
            },
            "ref": null,
            "rendered": "The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "form",
              "children": Array [
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  onChange={[Function]}
                  placeholder="Access point name"
                  required={true}
                />,
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  onChange={[Function]}
                  placeholder="Access point password"
                  required={true}
                  type="password"
                />,
              ],
              "id": "apForm",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "as": [Function],
                  "control": [Function],
                  "onChange": [Function],
                  "placeholder": "Access point name",
                  "required": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "as": [Function],
                  "control": [Function],
                  "onChange": [Function],
                  "placeholder": "Access point password",
                  "required": true,
                  "type": "password",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Button
              as="button"
              form="apForm"
              primary={true}
              type="submit"
            >
              Download
            </Button>,
            <Button
              as="button"
              onClick={[Function]}
            >
              Cancel
            </Button>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "button",
              "children": "Download",
              "form": "apForm",
              "primary": true,
              "type": "submit",
            },
            "ref": null,
            "rendered": "Download",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "button",
              "children": "Cancel",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Cancel",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "centered": true,
        "children": Array [
          <ModalHeader>
            Enter WiFi Credentials
          </ModalHeader>,
          <ModalContent>
            <p>
              The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.
            </p>
            <Form
              as="form"
              id="apForm"
              onSubmit={[Function]}
            >
              <FormInput
                as={[Function]}
                control={[Function]}
                onChange={[Function]}
                placeholder="Access point name"
                required={true}
              />
              <FormInput
                as={[Function]}
                control={[Function]}
                onChange={[Function]}
                placeholder="Access point password"
                required={true}
                type="password"
              />
            </Form>
          </ModalContent>,
          <ModalActions>
            <Button
              as="button"
              form="apForm"
              primary={true}
              type="submit"
            >
              Download
            </Button>
            <Button
              as="button"
              onClick={[Function]}
            >
              Cancel
            </Button>
          </ModalActions>,
        ],
        "closeOnDimmerClick": true,
        "closeOnDocumentClick": false,
        "dimmer": true,
        "eventPool": "Modal",
        "onClose": [Function],
        "open": false,
        "trigger": <Button
          as="button"
          onClick={[Function]}
        >
          <Icon
            as="i"
            name="download"
          />
          Download Credentials
        </Button>,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Enter WiFi Credentials",
          },
          "ref": null,
          "rendered": "Enter WiFi Credentials",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <p>
                The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.
              </p>,
              <Form
                as="form"
                id="apForm"
                onSubmit={[Function]}
              >
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  onChange={[Function]}
                  placeholder="Access point name"
                  required={true}
                />
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  onChange={[Function]}
                  placeholder="Access point password"
                  required={true}
                  type="password"
                />
              </Form>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.",
              },
              "ref": null,
              "rendered": "The credentials entered are only used for the configuration file for the rover. This information does not leave the local browser and is not sent to the server.",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "form",
                "children": Array [
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    onChange={[Function]}
                    placeholder="Access point name"
                    required={true}
                  />,
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    onChange={[Function]}
                    placeholder="Access point password"
                    required={true}
                    type="password"
                  />,
                ],
                "id": "apForm",
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": [Function],
                    "control": [Function],
                    "onChange": [Function],
                    "placeholder": "Access point name",
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": [Function],
                    "control": [Function],
                    "onChange": [Function],
                    "placeholder": "Access point password",
                    "required": true,
                    "type": "password",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Button
                as="button"
                form="apForm"
                primary={true}
                type="submit"
              >
                Download
              </Button>,
              <Button
                as="button"
                onClick={[Function]}
              >
                Cancel
              </Button>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "button",
                "children": "Download",
                "form": "apForm",
                "primary": true,
                "type": "submit",
              },
              "ref": null,
              "rendered": "Download",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "button",
                "children": "Cancel",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Cancel",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
