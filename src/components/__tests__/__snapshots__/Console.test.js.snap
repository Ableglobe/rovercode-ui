// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Console component renders on the page with no errors 1`] = `
<Connect(Console)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Console
    clear={[Function]}
    console={
      Object {
        "messages": Array [
          "first",
          "second",
        ],
      }
    }
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [MockFunction],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <div
      style={
        Object {
          "height": "200px",
          "overflow": "scroll",
        }
      }
    >
      <p
        key="0"
      >
        &gt;&gt; first
      </p>
      <p
        key="1"
      >
        &gt;&gt; second
      </p>
      <div />
    </div>
    <Button
      as="button"
      onClick={[Function]}
      primary={true}
      style={
        Object {
          "marginTop": "10px",
        }
      }
    >
      <Ref
        innerRef={
          Object {
            "current": <button
              class="ui primary button"
              style="margin-top: 10px;"
            >
              <span>
                Clear
              </span>
            </button>,
          }
        }
      >
        <RefFindNode
          innerRef={
            Object {
              "current": <button
                class="ui primary button"
                style="margin-top: 10px;"
              >
                <span>
                  Clear
                </span>
              </button>,
            }
          }
        >
          <button
            className="ui primary button"
            onClick={[Function]}
            style={
              Object {
                "marginTop": "10px",
              }
            }
          >
            <FormattedMessage
              defaultMessage="Clear"
              id="app.console.clear"
              values={Object {}}
            >
              <span>
                Clear
              </span>
            </FormattedMessage>
          </button>
        </RefFindNode>
      </Ref>
    </Button>
  </Console>
</Connect(Console)>
`;
