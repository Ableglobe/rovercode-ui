// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The TopNav component should render on the page with no errors 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TopNav
    allCookies={
      Object {
        "auth_jwt": "1234",
      }
    }
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {
          "auth_jwt": "1234",
        },
        "hooks": undefined,
      }
    }
    userName="Dale Gribble"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        null,
        <Menu
          color="black"
          inverted={true}
        >
          <MenuItem
            as={[Function]}
            to="/"
          >
            <Image
              as="img"
              size="mini"
              src={Object {}}
              ui={true}
            />
          </MenuItem>
          <MenuItem
            as={[Function]}
            to="/programs"
          >
            Programs
          </MenuItem>
          <MenuItem
            as={[Function]}
            to="/rovers"
          >
            Rovers
          </MenuItem>
          <MenuMenu
            position="right"
          >
            <Dropdown
              additionLabel="Add "
              additionPosition="top"
              closeOnBlur={true}
              deburr={false}
              icon="dropdown"
              item={true}
              minCharacters={1}
              noResultsMessage="No results found."
              openOnFocus={true}
              renderLabel={[Function]}
              searchInput="text"
              selectOnBlur={true}
              selectOnNavigation={true}
              text="Dale Gribble"
              wrapSelection={true}
            >
              <DropdownMenu>
                <DropdownItem
                  as={[Function]}
                  to="/user/settings"
                >
                  Settings
                </DropdownItem>
                <DropdownDivider />
                <DropdownItem
                  as={[Function]}
                  onClick={[Function]}
                >
                  Sign Out
                </DropdownItem>
              </DropdownMenu>
            </Dropdown>
          </MenuMenu>
        </Menu>,
      ],
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <MenuItem
              as={[Function]}
              to="/"
            >
              <Image
                as="img"
                size="mini"
                src={Object {}}
                ui={true}
              />
            </MenuItem>,
            <MenuItem
              as={[Function]}
              to="/programs"
            >
              Programs
            </MenuItem>,
            <MenuItem
              as={[Function]}
              to="/rovers"
            >
              Rovers
            </MenuItem>,
            <MenuMenu
              position="right"
            >
              <Dropdown
                additionLabel="Add "
                additionPosition="top"
                closeOnBlur={true}
                deburr={false}
                icon="dropdown"
                item={true}
                minCharacters={1}
                noResultsMessage="No results found."
                openOnFocus={true}
                renderLabel={[Function]}
                searchInput="text"
                selectOnBlur={true}
                selectOnNavigation={true}
                text="Dale Gribble"
                wrapSelection={true}
              >
                <DropdownMenu>
                  <DropdownItem
                    as={[Function]}
                    to="/user/settings"
                  >
                    Settings
                  </DropdownItem>
                  <DropdownDivider />
                  <DropdownItem
                    as={[Function]}
                    onClick={[Function]}
                  >
                    Sign Out
                  </DropdownItem>
                </DropdownMenu>
              </Dropdown>
            </MenuMenu>,
          ],
          "color": "black",
          "inverted": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": [Function],
              "children": <Image
                as="img"
                size="mini"
                src={Object {}}
                ui={true}
              />,
              "to": "/",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "as": "img",
                "size": "mini",
                "src": Object {},
                "ui": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": [Function],
              "children": "Programs",
              "to": "/programs",
            },
            "ref": null,
            "rendered": "Programs",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": [Function],
              "children": "Rovers",
              "to": "/rovers",
            },
            "ref": null,
            "rendered": "Rovers",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Dropdown
                additionLabel="Add "
                additionPosition="top"
                closeOnBlur={true}
                deburr={false}
                icon="dropdown"
                item={true}
                minCharacters={1}
                noResultsMessage="No results found."
                openOnFocus={true}
                renderLabel={[Function]}
                searchInput="text"
                selectOnBlur={true}
                selectOnNavigation={true}
                text="Dale Gribble"
                wrapSelection={true}
              >
                <DropdownMenu>
                  <DropdownItem
                    as={[Function]}
                    to="/user/settings"
                  >
                    Settings
                  </DropdownItem>
                  <DropdownDivider />
                  <DropdownItem
                    as={[Function]}
                    onClick={[Function]}
                  >
                    Sign Out
                  </DropdownItem>
                </DropdownMenu>
              </Dropdown>,
              "position": "right",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "additionLabel": "Add ",
                "additionPosition": "top",
                "children": <DropdownMenu>
                  <DropdownItem
                    as={[Function]}
                    to="/user/settings"
                  >
                    Settings
                  </DropdownItem>
                  <DropdownDivider />
                  <DropdownItem
                    as={[Function]}
                    onClick={[Function]}
                  >
                    Sign Out
                  </DropdownItem>
                </DropdownMenu>,
                "closeOnBlur": true,
                "deburr": false,
                "icon": "dropdown",
                "item": true,
                "minCharacters": 1,
                "noResultsMessage": "No results found.",
                "openOnFocus": true,
                "renderLabel": [Function],
                "searchInput": "text",
                "selectOnBlur": true,
                "selectOnNavigation": true,
                "text": "Dale Gribble",
                "wrapSelection": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <DropdownItem
                      as={[Function]}
                      to="/user/settings"
                    >
                      Settings
                    </DropdownItem>,
                    <DropdownDivider />,
                    <DropdownItem
                      as={[Function]}
                      onClick={[Function]}
                    >
                      Sign Out
                    </DropdownItem>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": [Function],
                      "children": "Settings",
                      "to": "/user/settings",
                    },
                    "ref": null,
                    "rendered": "Settings",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": [Function],
                      "children": "Sign Out",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Sign Out",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          null,
          <Menu
            color="black"
            inverted={true}
          >
            <MenuItem
              as={[Function]}
              to="/"
            >
              <Image
                as="img"
                size="mini"
                src={Object {}}
                ui={true}
              />
            </MenuItem>
            <MenuItem
              as={[Function]}
              to="/programs"
            >
              Programs
            </MenuItem>
            <MenuItem
              as={[Function]}
              to="/rovers"
            >
              Rovers
            </MenuItem>
            <MenuMenu
              position="right"
            >
              <Dropdown
                additionLabel="Add "
                additionPosition="top"
                closeOnBlur={true}
                deburr={false}
                icon="dropdown"
                item={true}
                minCharacters={1}
                noResultsMessage="No results found."
                openOnFocus={true}
                renderLabel={[Function]}
                searchInput="text"
                selectOnBlur={true}
                selectOnNavigation={true}
                text="Dale Gribble"
                wrapSelection={true}
              >
                <DropdownMenu>
                  <DropdownItem
                    as={[Function]}
                    to="/user/settings"
                  >
                    Settings
                  </DropdownItem>
                  <DropdownDivider />
                  <DropdownItem
                    as={[Function]}
                    onClick={[Function]}
                  >
                    Sign Out
                  </DropdownItem>
                </DropdownMenu>
              </Dropdown>
            </MenuMenu>
          </Menu>,
        ],
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <MenuItem
                as={[Function]}
                to="/"
              >
                <Image
                  as="img"
                  size="mini"
                  src={Object {}}
                  ui={true}
                />
              </MenuItem>,
              <MenuItem
                as={[Function]}
                to="/programs"
              >
                Programs
              </MenuItem>,
              <MenuItem
                as={[Function]}
                to="/rovers"
              >
                Rovers
              </MenuItem>,
              <MenuMenu
                position="right"
              >
                <Dropdown
                  additionLabel="Add "
                  additionPosition="top"
                  closeOnBlur={true}
                  deburr={false}
                  icon="dropdown"
                  item={true}
                  minCharacters={1}
                  noResultsMessage="No results found."
                  openOnFocus={true}
                  renderLabel={[Function]}
                  searchInput="text"
                  selectOnBlur={true}
                  selectOnNavigation={true}
                  text="Dale Gribble"
                  wrapSelection={true}
                >
                  <DropdownMenu>
                    <DropdownItem
                      as={[Function]}
                      to="/user/settings"
                    >
                      Settings
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem
                      as={[Function]}
                      onClick={[Function]}
                    >
                      Sign Out
                    </DropdownItem>
                  </DropdownMenu>
                </Dropdown>
              </MenuMenu>,
            ],
            "color": "black",
            "inverted": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": [Function],
                "children": <Image
                  as="img"
                  size="mini"
                  src={Object {}}
                  ui={true}
                />,
                "to": "/",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "as": "img",
                  "size": "mini",
                  "src": Object {},
                  "ui": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": [Function],
                "children": "Programs",
                "to": "/programs",
              },
              "ref": null,
              "rendered": "Programs",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": [Function],
                "children": "Rovers",
                "to": "/rovers",
              },
              "ref": null,
              "rendered": "Rovers",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Dropdown
                  additionLabel="Add "
                  additionPosition="top"
                  closeOnBlur={true}
                  deburr={false}
                  icon="dropdown"
                  item={true}
                  minCharacters={1}
                  noResultsMessage="No results found."
                  openOnFocus={true}
                  renderLabel={[Function]}
                  searchInput="text"
                  selectOnBlur={true}
                  selectOnNavigation={true}
                  text="Dale Gribble"
                  wrapSelection={true}
                >
                  <DropdownMenu>
                    <DropdownItem
                      as={[Function]}
                      to="/user/settings"
                    >
                      Settings
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem
                      as={[Function]}
                      onClick={[Function]}
                    >
                      Sign Out
                    </DropdownItem>
                  </DropdownMenu>
                </Dropdown>,
                "position": "right",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "additionLabel": "Add ",
                  "additionPosition": "top",
                  "children": <DropdownMenu>
                    <DropdownItem
                      as={[Function]}
                      to="/user/settings"
                    >
                      Settings
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem
                      as={[Function]}
                      onClick={[Function]}
                    >
                      Sign Out
                    </DropdownItem>
                  </DropdownMenu>,
                  "closeOnBlur": true,
                  "deburr": false,
                  "icon": "dropdown",
                  "item": true,
                  "minCharacters": 1,
                  "noResultsMessage": "No results found.",
                  "openOnFocus": true,
                  "renderLabel": [Function],
                  "searchInput": "text",
                  "selectOnBlur": true,
                  "selectOnNavigation": true,
                  "text": "Dale Gribble",
                  "wrapSelection": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <DropdownItem
                        as={[Function]}
                        to="/user/settings"
                      >
                        Settings
                      </DropdownItem>,
                      <DropdownDivider />,
                      <DropdownItem
                        as={[Function]}
                        onClick={[Function]}
                      >
                        Sign Out
                      </DropdownItem>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "as": [Function],
                        "children": "Settings",
                        "to": "/user/settings",
                      },
                      "ref": null,
                      "rendered": "Settings",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "as": [Function],
                        "children": "Sign Out",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": "Sign Out",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "context": Object {
      "cookies": Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {
          "auth_jwt": "1234",
        },
        "hooks": undefined,
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
