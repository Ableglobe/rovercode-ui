// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ProgramTags component renders on the page with no errors 1`] = `
<withCookies(Component)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "payload": Promise {},
              "type": "FETCH_TAGS",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <InjectIntl(Connect(ProgramTags))
    allCookies={Object {}}
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
        "hooks": undefined,
      }
    }
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "payload": Promise {},
                "type": "FETCH_TAGS",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(ProgramTags)
      allCookies={Object {}}
      cookies={
        Cookies {
          "HAS_DOCUMENT_COOKIE": true,
          "changeListeners": Array [
            [Function],
          ],
          "cookies": Object {},
          "hooks": undefined,
        }
      }
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "payload": Promise {},
                  "type": "FETCH_TAGS",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <ProgramTags
        allCookies={Object {}}
        changeProgramTags={[Function]}
        code={
          Object {
            "isReadOnly": false,
            "tags": Array [
              "tag1",
              "tag2",
            ],
          }
        }
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": true,
            "changeListeners": Array [
              [Function],
            ],
            "cookies": Object {},
            "hooks": undefined,
          }
        }
        fetchTags={[Function]}
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "payload": Promise {},
                    "type": "FETCH_TAGS",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
        storeSubscription={
          Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "payload": Promise {},
                      "type": "FETCH_TAGS",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          }
        }
        tag={
          Object {
            "tags": Array [
              Object {
                "name": "tag1",
              },
              Object {
                "name": "tag2",
              },
              Object {
                "name": "tag3",
              },
            ],
          }
        }
      >
        <Grid
          centered={true}
          container={true}
        >
          <div
            className="ui centered container grid"
          >
            <GridRow>
              <div
                className="row"
              >
                <Dropdown
                  additionLabel="Add "
                  additionPosition="top"
                  allowAdditions={true}
                  closeOnBlur={true}
                  closeOnChange={true}
                  deburr={false}
                  disabled={false}
                  fluid={true}
                  icon="dropdown"
                  minCharacters={1}
                  multiple={true}
                  noResultsMessage="No results found."
                  onAddItem={[Function]}
                  onChange={[Function]}
                  openOnFocus={true}
                  options={
                    Array [
                      Object {
                        "key": "tag1",
                        "text": "tag1",
                        "value": "tag1",
                      },
                      Object {
                        "key": "tag2",
                        "text": "tag2",
                        "value": "tag2",
                      },
                      Object {
                        "key": "tag3",
                        "text": "tag3",
                        "value": "tag3",
                      },
                    ]
                  }
                  placeholder="Add tags..."
                  renderLabel={[Function]}
                  search={true}
                  searchInput="text"
                  selectOnBlur={true}
                  selectOnNavigation={true}
                  selection={true}
                  value={
                    Array [
                      "tag1",
                      "tag2",
                    ]
                  }
                  wrapSelection={true}
                >
                  <div
                    aria-disabled={false}
                    aria-expanded={false}
                    className="ui fluid multiple search selection dropdown"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseDown={[Function]}
                    role="combobox"
                  >
                    <Label
                      active={false}
                      as="a"
                      content="tag1"
                      key="tag1"
                      onClick={[Function]}
                      onRemove={[Function]}
                      value="tag1"
                    >
                      <a
                        className="ui label"
                        onClick={[Function]}
                        value="tag1"
                      >
                        tag1
                        <Icon
                          as="i"
                          name="delete"
                          onClick={[Function]}
                        >
                          <i
                            aria-hidden="true"
                            className="delete icon"
                            onClick={[Function]}
                          />
                        </Icon>
                      </a>
                    </Label>
                    <Label
                      active={false}
                      as="a"
                      content="tag2"
                      key="tag2"
                      onClick={[Function]}
                      onRemove={[Function]}
                      value="tag2"
                    >
                      <a
                        className="ui label"
                        onClick={[Function]}
                        value="tag2"
                      >
                        tag2
                        <Icon
                          as="i"
                          name="delete"
                          onClick={[Function]}
                        >
                          <i
                            aria-hidden="true"
                            className="delete icon"
                            onClick={[Function]}
                          />
                        </Icon>
                      </a>
                    </Label>
                    <DropdownSearchInput
                      autoComplete="off"
                      inputRef={[Function]}
                      key="text"
                      onChange={[Function]}
                      style={
                        Object {
                          "width": undefined,
                        }
                      }
                      tabIndex={0}
                      type="text"
                      value=""
                    >
                      <input
                        aria-autocomplete="list"
                        autoComplete="off"
                        className="search"
                        onChange={[Function]}
                        style={
                          Object {
                            "width": undefined,
                          }
                        }
                        tabIndex={0}
                        type="text"
                        value=""
                      />
                    </DropdownSearchInput>
                    <span
                      className="sizer"
                    />
                    <div
                      aria-live="polite"
                      className="text"
                      role="alert"
                    />
                    <Icon
                      as="i"
                      className=""
                      name="dropdown"
                      onClick={[Function]}
                    >
                      <i
                        aria-hidden="true"
                        className="dropdown icon"
                        onClick={[Function]}
                      />
                    </Icon>
                    <DropdownMenu
                      aria-multiselectable={true}
                      role="listbox"
                    >
                      <div
                        aria-multiselectable={true}
                        className="menu transition"
                        role="listbox"
                      >
                        <DropdownItem
                          active={false}
                          key="tag3"
                          onClick={[Function]}
                          selected={true}
                          style={
                            Object {
                              "pointerEvents": "all",
                            }
                          }
                          text="tag3"
                          value="tag3"
                        >
                          <div
                            aria-checked={false}
                            aria-selected={true}
                            className="selected item"
                            onClick={[Function]}
                            role="option"
                            style={
                              Object {
                                "pointerEvents": "all",
                              }
                            }
                          >
                            <span
                              className="text"
                            >
                              tag3
                            </span>
                          </div>
                        </DropdownItem>
                      </div>
                    </DropdownMenu>
                  </div>
                </Dropdown>
              </div>
            </GridRow>
            <GridRow>
              <div
                className="row"
              >
                <Button
                  as="button"
                  disabled={true}
                  onClick={[Function]}
                  primary={true}
                >
                  <button
                    className="ui primary disabled button"
                    disabled={true}
                    onClick={[Function]}
                    tabIndex={-1}
                  >
                    <FormattedMessage
                      defaultMessage="Save"
                      id="app.program_tags.save"
                      values={Object {}}
                    >
                      <span>
                        Save
                      </span>
                    </FormattedMessage>
                  </button>
                </Button>
              </div>
            </GridRow>
          </div>
        </Grid>
      </ProgramTags>
    </Connect(ProgramTags)>
  </InjectIntl(Connect(ProgramTags))>
</withCookies(Component)>
`;
